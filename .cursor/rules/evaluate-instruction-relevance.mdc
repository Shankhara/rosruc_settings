---
description: Analyser systématiquement la pertinence technique des instructions pour optimiser l'architecture et éviter la redondance
globs: **/*.{js,jsx,ts,tsx}
---

# Évaluation critique des instructions

## Context
- Pour chaque nouvelle demande de fonctionnalité ou modification
- Lorsque les instructions semblent chevaucher des fonctionnalités existantes
- Quand une demande pourrait impacter la performance ou la maintenance

## Requirements
- Vérifier si la fonctionnalité existe déjà ailleurs (utiliser la recherche de code)
- Évaluer l'alignement avec l'architecture existante sur 3 critères: cohérence, performance, maintenabilité
- Proposer des alternatives si l'implémentation demandée présente des faiblesses
- Quantifier l'impact potentiel (ex: augmentation de la taille du bundle, temps de chargement)
- Identifier au moins 2 risques techniques potentiels

## Examples
<example>
Analyse critique de la demande:

1. **État actuel**: J'ai recherché dans la codebase et constaté que:
   - Une logique similaire existe déjà dans `src/utils/validation.ts`
   - Le composant `FormField` supporte déjà 80% des cas d'usage demandés

2. **Évaluation d'alignement**:
   - Cohérence: La demande introduit un pattern différent de celui utilisé dans le reste de l'application
   - Performance: L'approche demandée nécessiterait un re-rendu supplémentaire
   - Maintenabilité: Créerait une duplication de logique à maintenir en parallèle

3. **Proposition alternative**:
   - Étendre le composant `FormField` existant plutôt que d'en créer un nouveau
   - Impact: Réduction de 5KB sur le bundle final, réutilisation de tests existants

4. **Risques identifiés**:
   - Fragmentation de l'API des formulaires
   - Régression potentielle sur les formulaires existants
</example>

<example type="invalid">
Je vais implémenter exactement ce qui est demandé sans évaluer si c'est la meilleure approche.
</example>